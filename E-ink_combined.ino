/*
  Iver Iscariot Søbakk's E-ink display tide-watch

  NTP-library: https://github.com/taranais/NTPClient
*/

// BUSY -> 25, RST -> 26, DC -> 27, CS-> 15, CLK -> 13, DIN -> 14

#define USE_HSPI_FOR_EPD
#define ENABLE_GxEPD2_GFX 0

#include <GxEPD2_BW.h>
#include <Fonts/FreeMonoBold9pt7b.h>


// ###################################################################################################################
// ###################################################################################################################
// ######################### mumbo jumbo display defines #############################################################
#define GxEPD2_DISPLAY_CLASS GxEPD2_BW
#define GxEPD2_DRIVER_CLASS GxEPD2_154     // GDEP015OC1  200x200, IL3829, (WFC0000CZ07), no longer available

#define GxEPD2_BW_IS_GxEPD2_BW true
#define GxEPD2_1248_IS_GxEPD2_1248 true
#define IS_GxEPD(c, x) (c##x)
#define IS_GxEPD2_BW(x) IS_GxEPD(GxEPD2_BW_IS_, x)
#define IS_GxEPD2_1248(x) IS_GxEPD(GxEPD2_1248_IS_, x)


#if defined(ESP32)
#define MAX_DISPLAY_BUFFER_SIZE 65536ul // e.g.
#if IS_GxEPD2_BW(GxEPD2_DISPLAY_CLASS)
#define MAX_HEIGHT(EPD) (EPD::HEIGHT <= MAX_DISPLAY_BUFFER_SIZE / (EPD::WIDTH / 8) ? EPD::HEIGHT : MAX_DISPLAY_BUFFER_SIZE / (EPD::WIDTH / 8))
#elif IS_GxEPD2_3C(GxEPD2_DISPLAY_CLASS)
#define MAX_HEIGHT(EPD) (EPD::HEIGHT <= (MAX_DISPLAY_BUFFER_SIZE / 2) / (EPD::WIDTH / 8) ? EPD::HEIGHT : (MAX_DISPLAY_BUFFER_SIZE / 2) / (EPD::WIDTH / 8))
#elif IS_GxEPD2_7C(GxEPD2_DISPLAY_CLASS)
#define MAX_HEIGHT(EPD) (EPD::HEIGHT <= (MAX_DISPLAY_BUFFER_SIZE) / (EPD::WIDTH / 2) ? EPD::HEIGHT : (MAX_DISPLAY_BUFFER_SIZE) / (EPD::WIDTH / 2))
#endif
GxEPD2_DISPLAY_CLASS<GxEPD2_DRIVER_CLASS, MAX_HEIGHT(GxEPD2_DRIVER_CLASS)> display(GxEPD2_DRIVER_CLASS(/*CS=*/ 15, /*DC=*/ 27, /*RST=*/ 26, /*BUSY=*/ 25));
#endif


#if defined(ESP32) && defined(USE_HSPI_FOR_EPD)
SPIClass hspi(HSPI);
#endif
// ###################################################################################################################
// ###################################################################################################################


#include <WiFi.h>
#include <HTTPClient.h>
#include "TimeLib.h"
#include <Arduino.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <ESP32Time.h>




// /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
// /\/\/\/\/\/\/\/\/\/\/ user defined variables \/\/\/\/\/\/\/\/\/\/\/\/\/

const char lat[]      =  "59.887540";
const char lon[]      =  "10.714747";

const byte nDays      =  3;                  // Antall dager med data du laster ned når du trykker synk
const byte gmtOffset  =  1;                  // Tidssonen vi bruker

const char* ssid      =  "123";
const char* password  =  "12345678";

// /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
// /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
const byte screenRot = 3;



// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

// Variables to save date and time
String formattedDate;
String dayStamp;
String timeStamp;

//ESP32Time rtc;
ESP32Time rtc(gmtOffset*3600);  // offset in seconds GMT+1

//Your Domain name with URL path or IP address with path
String serverName = "https://api.sehavniva.no/tideapi.php";

const int nHours = nDays*24;

struct tide_t{
  int Level[nHours];
  time_t Time[nHours];
};

tide_t tideData;

const unsigned char cat [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 
	0xb7, 0xd4, 0x90, 0xee, 0xdb, 0xee, 0xff, 0xfe, 0xff, 0xff, 0xfd, 0xb5, 0xaa, 0xaa, 0xaa, 0xaa, 
	0xaa, 0xaa, 0xbd, 0xed, 0x75, 0x48, 0xbf, 0xfe, 0xfb, 0xd6, 0xdb, 0xdb, 0x6d, 0xaf, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x77, 0xd4, 0x54, 0xfb, 0x77, 0xdf, 0xff, 0xff, 0xff, 0xff, 
	0xfd, 0xb6, 0xb7, 0x6d, 0xb5, 0xaa, 0xad, 0xad, 0xfd, 0xad, 0x72, 0xa8, 0xef, 0xff, 0x7e, 0xfb, 
	0x77, 0x7f, 0xfe, 0xf7, 0xff, 0xfd, 0xff, 0xef, 0x7f, 0xff, 0xfe, 0xaf, 0xf7, 0xd5, 0x24, 0xbe, 
	0xdb, 0xf7, 0xaf, 0xdf, 0xed, 0xb7, 0xde, 0xd5, 0xaf, 0x55, 0x7b, 0xda, 0xd5, 0x57, 0xf5, 0x5d, 
	0x6a, 0x90, 0xfb, 0xff, 0xdf, 0xff, 0x7d, 0xbf, 0xfe, 0xfb, 0xff, 0xfb, 0xff, 0xdd, 0x77, 0xff, 
	0xfd, 0x5f, 0xeb, 0xa9, 0x54, 0xef, 0xdd, 0xfd, 0xf7, 0xf7, 0xfb, 0x6f, 0xdf, 0x56, 0xad, 0xb6, 
	0xef, 0xdd, 0x55, 0xb7, 0xf5, 0x5d, 0xe4, 0xa8, 0xbe, 0xf7, 0x6f, 0x5d, 0xbe, 0xdf, 0xfb, 0xfd, 
	0xff, 0xfe, 0xfb, 0x75, 0xf7, 0xff, 0xdd, 0x6f, 0xb7, 0x55, 0x48, 0xfb, 0xdf, 0xfd, 0xff, 0xf7, 
	0xfb, 0x7f, 0xf7, 0xaa, 0xab, 0xaf, 0xbf, 0x5d, 0xaa, 0xf7, 0xfa, 0xda, 0xea, 0x54, 0xdf, 0x7b, 
	0x6f, 0xed, 0xde, 0xdf, 0xff, 0xff, 0xff, 0xfe, 0xfa, 0xd5, 0xee, 0xff, 0xbd, 0x5d, 0x6f, 0x55, 
	0x48, 0xfd, 0xff, 0xfd, 0xbf, 0x7b, 0xff, 0xff, 0xff, 0x75, 0x55, 0xaf, 0x7e, 0xb7, 0x55, 0xd7, 
	0xeb, 0xb5, 0xd2, 0x54, 0xb7, 0xdb, 0x6f, 0xf7, 0xdf, 0xb7, 0xff, 0xfb, 0xff, 0xff, 0xfb, 0xab, 
	0xfb, 0xfe, 0xfd, 0x7d, 0x6e, 0xa9, 0x48, 0xff, 0x7f, 0xfa, 0xdd, 0xed, 0xff, 0xff, 0xff, 0xea, 
	0xaa, 0xad, 0xfe, 0xad, 0x57, 0x57, 0xae, 0xb3, 0x55, 0x28, 0xdb, 0xed, 0x5f, 0xf7, 0x76, 0xdf, 
	0xff, 0xff, 0xff, 0xff, 0xf6, 0xab, 0xf7, 0xfb, 0xfa, 0xf5, 0xdd, 0xca, 0xa4, 0xff, 0x7f, 0xf5, 
	0x5f, 0xdf, 0x77, 0xff, 0xff, 0x7d, 0x55, 0x5b, 0x7d, 0x5d, 0x55, 0x5f, 0x5b, 0x56, 0xa9, 0x28, 
	0xb7, 0xed, 0xbf, 0xf5, 0x75, 0xdb, 0xff, 0xff, 0xf7, 0x6d, 0xb6, 0xd7, 0xb7, 0x7e, 0xe9, 0xad, 
	0x6b, 0xd4, 0xa4, 0xfd, 0xbf, 0xd5, 0xbf, 0xdf, 0x6f, 0xdf, 0x7e, 0xfd, 0xb6, 0xdb, 0x6a, 0xda, 
	0xd5, 0xae, 0xd5, 0x5d, 0x4a, 0xa8, 0xb7, 0xf5, 0x7f, 0xd5, 0x77, 0xb7, 0xff, 0xfb, 0xdf, 0xd5, 
	0x6d, 0xbd, 0x6d, 0xae, 0xb5, 0x6d, 0xa7, 0xaa, 0x94, 0xfe, 0xdf, 0xda, 0xff, 0xdf, 0xab, 0xff, 
	0xff, 0xfa, 0xae, 0xaa, 0xd7, 0xb6, 0xf5, 0xdb, 0x55, 0x5a, 0xa4, 0xa8, 0xdb, 0xfb, 0x7f, 0x5a, 
	0xef, 0x5d, 0xff, 0xfe, 0xdf, 0xb3, 0x6b, 0x5a, 0xd5, 0x56, 0xad, 0x6a, 0xaf, 0x52, 0xa4, 0xff, 
	0x6f, 0xd5, 0xf7, 0xbf, 0xf7, 0xfb, 0xdb, 0xea, 0xd5, 0x55, 0x6b, 0x6f, 0xb5, 0x6a, 0xb5, 0x55, 
	0xaa, 0x50, 0xad, 0xfa, 0xff, 0xbd, 0xef, 0xdf, 0xbf, 0xfe, 0xbf, 0x56, 0xba, 0xad, 0x5a, 0xdb, 
	0xb5, 0x56, 0xbb, 0x4a, 0x94, 0xff, 0x5f, 0xb6, 0xef, 0x7f, 0xfd, 0xff, 0xf5, 0x4b, 0xea, 0xab, 
	0xd5, 0xad, 0x6d, 0x56, 0xda, 0xcd, 0x55, 0x50, 0xdb, 0xf6, 0xff, 0xbb, 0xbf, 0xf7, 0xf7, 0x5a, 
	0xb5, 0x55, 0x55, 0x6e, 0xb6, 0xaa, 0xdb, 0x55, 0x77, 0x48, 0xa8, 0xfe, 0xdf, 0xaa, 0xfe, 0xfe, 
	0xff, 0xdf, 0xf6, 0xae, 0xaa, 0xad, 0x55, 0x6b, 0xdd, 0x6a, 0xaa, 0x9b, 0x25, 0x24, 0xab, 0xf5, 
	0xff, 0xaf, 0x5f, 0xff, 0xfe, 0xda, 0xb7, 0xd5, 0x55, 0x55, 0xb5, 0x6b, 0xaa, 0xb5, 0xad, 0x55, 
	0x50, 0xff, 0x7f, 0x55, 0xfb, 0xff, 0xbd, 0xfb, 0xed, 0x5a, 0xb4, 0xab, 0x56, 0xae, 0xb5, 0x5b, 
	0x56, 0xdb, 0x49, 0x28, 0xb7, 0xd6, 0xff, 0x6d, 0x7f, 0xf7, 0xbf, 0xf6, 0xd6, 0xd5, 0x55, 0x6b, 
	0x5b, 0x5d, 0xaa, 0xea, 0xad, 0x2a, 0xa4, 0xfd, 0x7f, 0xb5, 0xbf, 0xfe, 0xdf, 0xee, 0xbb, 0x6d, 
	0x54, 0xaa, 0xaa, 0xea, 0xea, 0xed, 0x5a, 0xb6, 0xa4, 0x94, 0xd7, 0xea, 0xff, 0xea, 0xbf, 0xe2, 
	0xfb, 0xed, 0x57, 0xaa, 0x2b, 0x55, 0x5f, 0x57, 0x56, 0xd6, 0xda, 0x95, 0x50, 0xfe, 0xdf, 0xaa, 
	0xbf, 0xff, 0xfb, 0xae, 0xf6, 0xba, 0xd1, 0x55, 0x5b, 0x6a, 0xed, 0xbb, 0x6b, 0x6e, 0x52, 0x48, 
	0xb7, 0xfd, 0xff, 0xea, 0xfd, 0x7d, 0xf2, 0xaa, 0xd5, 0x6c, 0x95, 0x6a, 0xb7, 0x55, 0x6a, 0xbd, 
	0x5a, 0xa9, 0x54, 0xfd, 0xb7, 0x6a, 0xbf, 0xff, 0xff, 0x49, 0x5a, 0xb7, 0xa2, 0x4a, 0xab, 0x5a, 
	0xee, 0xb7, 0xd5, 0xb6, 0x95, 0x50, 0xaf, 0xef, 0xbf, 0xea, 0xfe, 0xb7, 0xaa, 0xab, 0x5a, 0xd9, 
	0x25, 0x55, 0x6b, 0x5b, 0x5a, 0x56, 0xda, 0x49, 0x28, 0xfa, 0xba, 0xea, 0xbf, 0xfb, 0x5d, 0xaf, 
	0x55, 0xad, 0x68, 0x92, 0x55, 0xad, 0xaa, 0xed, 0xb5, 0x6d, 0x54, 0xa4, 0xdf, 0xff, 0xbf, 0xed, 
	0xee, 0xaf, 0xd5, 0x55, 0x77, 0xaa, 0x49, 0x54, 0xb5, 0x6d, 0x56, 0xdb, 0x55, 0x22, 0x94, 0xfb, 
	0xd5, 0xea, 0xb7, 0xff, 0x16, 0xad, 0x5a, 0xad, 0x54, 0x25, 0x55, 0x55, 0xb5, 0xb5, 0x6a, 0xba, 
	0x95, 0x50, 0xee, 0xed, 0x2a, 0x91, 0xfa, 0x45, 0xaa, 0xd6, 0xd6, 0xd2, 0x88, 0x25, 0x55, 0x56, 
	0xd6, 0xab, 0x6a, 0x54, 0x48, 0xda, 0x12, 0x44, 0x4b, 0xee, 0x05, 0x55, 0x55, 0x7b, 0x68, 0x22, 
	0x88, 0x02, 0x09, 0x2a, 0xad, 0xac, 0x92, 0xa8, 0xa1, 0x49, 0x29, 0x25, 0xfa, 0x28, 0xab, 0x6b, 
	0xad, 0xb5, 0x00, 0x22, 0xa8, 0xa0, 0x95, 0x75, 0x6a, 0x4a, 0x54, 0x2a, 0x44, 0x84, 0x97, 0xfd, 
	0x22, 0x55, 0x54, 0xb6, 0xd4, 0x4a, 0x88, 0x02, 0x0a, 0x01, 0x5f, 0xd9, 0x29, 0x48, 0x89, 0x29, 
	0x2a, 0x47, 0xdc, 0x48, 0x15, 0x6e, 0xdb, 0x74, 0x00, 0x22, 0xa8, 0xa1, 0x28, 0x2b, 0x6a, 0xa5, 
	0x24, 0x52, 0x00, 0x00, 0x13, 0xfa, 0x02, 0x0a, 0xaa, 0xad, 0xaa, 0x10, 0x00, 0x00, 0x08, 0x82, 
	0x85, 0xd4, 0x52, 0xa8, 0x00, 0x44, 0x80, 0x47, 0xfc, 0x20, 0x80, 0xb5, 0xb6, 0xd4, 0x40, 0x00, 
	0x02, 0x02, 0x28, 0x21, 0x55, 0x09, 0x24, 0xa4, 0x00, 0x12, 0x07, 0x68, 0x80, 0x00, 0x16, 0xd5, 
	0x58, 0x02, 0x00, 0x00, 0x20, 0x02, 0x88, 0x50, 0xaa, 0x94, 0x00, 0x80, 0x00, 0x17, 0xfc, 0x08, 
	0x12, 0x02, 0xad, 0xaa, 0x00, 0x20, 0x10, 0x00, 0x00, 0x55, 0x15, 0x44, 0x50, 0x00, 0x08, 0x80, 
	0x4f, 0xea, 0x01, 0x00, 0x01, 0x55, 0x68, 0x00, 0x02, 0x00, 0x00, 0x01, 0x10, 0x88, 0x2a, 0x94, 
	0x24, 0x00, 0x11, 0x0f, 0x78, 0x00, 0x00, 0x09, 0x6d, 0xa8, 0x02, 0x00, 0x00, 0x84, 0x44, 0x0a, 
	0x42, 0x91, 0x48, 0x00, 0x00, 0x00, 0x0f, 0xe8, 0x20, 0x21, 0x00, 0xaa, 0xa0, 0x20, 0x00, 0x10, 
	0x00, 0x00, 0x02, 0x28, 0xa4, 0x50, 0x00, 0x44, 0x40, 0x1b, 0xd0, 0x04, 0x00, 0x00, 0x56, 0xd8, 
	0x80, 0x00, 0x40, 0x00, 0x00, 0x80, 0x82, 0x13, 0x28, 0x04, 0x00, 0x04, 0x86, 0xf4, 0x00, 0x04, 
	0x10, 0x2b, 0x68, 0x00, 0x11, 0x00, 0x00, 0x00, 0x08, 0x48, 0x88, 0x88, 0x10, 0x01, 0x00, 0x0b, 
	0x50, 0x00, 0x80, 0x40, 0x95, 0xb4, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x02, 0x55, 0x50, 0x00, 
	0x10, 0x00, 0x05, 0xa0, 0x22, 0x00, 0x00, 0x0f, 0x68, 0x00, 0x00, 0x01, 0x00, 0x08, 0x20, 0x50, 
	0x6f, 0xec, 0x41, 0x00, 0x24, 0x00, 0x80, 0x00, 0x00, 0x04, 0x07, 0xd4, 0x00, 0x80, 0x04, 0x00, 
	0x80, 0x00, 0x05, 0x3d, 0x7c, 0x00, 0x02, 0x00, 0x02, 0x00, 0x80, 0x11, 0x00, 0x0d, 0xf8, 0x00, 
	0x00, 0x20, 0x02, 0x01, 0x04, 0x20, 0x2b, 0xd8, 0x08, 0x00, 0x00, 0x90, 0x02, 0x00, 0x40, 0x10, 
	0x27, 0x68, 0x04, 0x04, 0x00, 0x08, 0x04, 0x00, 0x89, 0x15, 0x6c, 0x21, 0x10, 0x84, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x8f, 0xe8, 0x10, 0x10, 0x00, 0x20, 0x10, 0x00, 0x00, 0x8a, 0xa8, 0x00, 0x00, 
	0x10, 0x00, 0x20, 0x08, 0x00, 0x02, 0x07, 0xb4, 0x00, 0x00, 0x00, 0x80, 0x00, 0x20, 0x2a, 0x25, 
	0x54, 0x00, 0x02, 0x00, 0x42, 0x00, 0x20, 0x00, 0x40, 0x0e, 0xe8, 0x00, 0x80, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x8a, 0xa8, 0x22, 0x20, 0x02, 0x00, 0x00, 0x00, 0x11, 0x08, 0x17, 0xe8, 0x00, 0x01, 
	0x00, 0x04, 0x40, 0x00, 0x04, 0x25, 0x58, 0x00, 0x00, 0x90, 0x00, 0x48, 0x80, 0x40, 0x00, 0x8f, 
	0xb0, 0x00, 0x08, 0x08, 0x00, 0x04, 0x00, 0x01, 0x09, 0x54, 0x10, 0x84, 0x00, 0x49, 0x00, 0x01, 
	0x00, 0x00, 0x0f, 0xe8, 0x00, 0x20, 0x00, 0x80, 0x00, 0x81, 0x24, 0x45, 0x54, 0x42, 0x00, 0x02, 
	0x00, 0x00, 0x08, 0x04, 0x90, 0x1d, 0xd0, 0x22, 0x00, 0x00, 0x08, 0x20, 0x10, 0x01, 0x12, 0xa8, 
	0x00, 0x10, 0x08, 0x00, 0x44, 0x40, 0x10, 0x02, 0x0f, 0xe8, 0x00, 0x00, 0x40, 0x00, 0x84, 0x00, 
	0x04, 0x44, 0x54, 0x10, 0x01, 0x21, 0x22, 0x00, 0x00, 0x40, 0x00, 0x5f, 0xb0, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x80, 0x11, 0x02, 0xa8, 0x41, 0x04, 0x00, 0x00, 0x11, 0x09, 0x00, 0x48, 0x0e, 0xe0, 
	0x00, 0x88, 0x04, 0x88, 0x10, 0x11, 0x00, 0x55, 0x54, 0x04, 0x20, 0x12, 0x10, 0x80, 0x00, 0x09, 
	0x01, 0x1f, 0xd0, 0x02, 0x00, 0x10, 0x00, 0x82, 0x00, 0x05, 0x00, 0xa8, 0x20, 0x01, 0x00, 0x42, 
	0x04, 0x84, 0x20, 0x04, 0x1f, 0xe0, 0x20, 0x00, 0x80, 0x00, 0x08, 0x80, 0x00, 0x4a, 0x54, 0x00, 
	0x88, 0x01, 0x00, 0x10, 0x20, 0x82, 0x20, 0x5d, 0xa0, 0x80, 0x22, 0x00, 0x04, 0x40, 0x11, 0x22, 
	0x21, 0x28, 0x12, 0x00, 0x48, 0x08, 0x80, 0x00, 0x00, 0x81, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x90, 
	0x04, 0x40, 0x00, 0x88, 0xa8, 0x40, 0x21, 0x00, 0x42, 0x02, 0x04, 0x12, 0x10, 0x1f, 0x50, 0x01, 
	0x00, 0x02, 0x01, 0x10, 0x00, 0x04, 0x42, 0xa8, 0x01, 0x04, 0x12, 0x20, 0x20, 0x40, 0x84, 0x84, 
	0xbd, 0xc1, 0x04, 0x10, 0x88, 0x04, 0x02, 0x24, 0x41, 0x11, 0x14, 0x10, 0x10, 0x42, 0xaa, 0x89, 
	0x14, 0x25, 0x22, 0x1f, 0x84, 0x10, 0x02, 0x00, 0x10, 0x48, 0x00, 0x00, 0x44, 0xa8, 0x00, 0x82, 
	0x2f, 0xdd, 0x65, 0x53, 0xbb, 0x5b, 0xbf, 0xa0, 0x01, 0x54, 0x44, 0x41, 0x01, 0x01, 0x09, 0x11, 
	0x54, 0x04, 0x09, 0xbb, 0x7f, 0xbf, 0xed, 0x5e, 0xac, 0xfd, 0x89, 0x24, 0x53, 0x55, 0x24, 0x08, 
	0x48, 0x00, 0x44, 0x54, 0x10, 0x45, 0x7f, 0xf6, 0xea, 0xbf, 0xef, 0xf7, 0x77, 0xa4, 0x89, 0x55, 
	0xbb, 0xd2, 0x42, 0x00, 0x21, 0x11, 0x58, 0x40, 0x12, 0xdb, 0xdf, 0xbf, 0xea, 0xba, 0xad, 0xdf, 
	0x52, 0x24, 0xbe, 0xd6, 0xbd, 0x08, 0x49, 0x04, 0x44, 0xa8, 0x02, 0xad, 0xfe, 0xfd, 0xf6, 0xff, 
	0xff, 0xdf, 0x7f, 0x8a, 0x92, 0xab, 0x6d, 0xd7, 0x62, 0x04, 0x50, 0x20, 0xa8, 0x08, 0x57, 0x6f, 
	0xb7, 0x7f, 0xb7, 0x6a, 0xb5, 0xfd, 0x4b, 0x49, 0x75, 0xae, 0xfd, 0xa8, 0xa1, 0x01, 0x0a, 0x54, 
	0x21, 0x7b, 0xfa, 0xff, 0xdb, 0xfd, 0xfd, 0x5e, 0xbf, 0xa5, 0x12, 0xbe, 0xf7, 0xaf, 0xf4, 0x14, 
	0x48, 0x50, 0xa8, 0x01, 0x5d, 0xaf, 0xda, 0xfe, 0xd7, 0xb5, 0x3b, 0xff, 0x14, 0xa5, 0xd5, 0x5a, 
	0xfa, 0xb5, 0x01, 0x20, 0x0a, 0x28, 0x05, 0xb7, 0xfd, 0x7f, 0xb7, 0xfd, 0xdc, 0x6e, 0xed, 0xaa, 
	0x4a, 0x6a, 0xaf, 0xbf, 0xfa, 0x54, 0x89, 0x40, 0xac, 0x22, 0xfe, 0xde, 0xd5, 0xfa, 0xae, 0xb7, 
	0xba, 0xbf, 0x95, 0x22, 0xbd, 0xea, 0xee, 0xdd, 0x02, 0x20, 0x14, 0x50, 0x0b, 0x5b, 0xf7, 0xfe, 
	0xaf, 0xf5, 0x5a, 0xe9, 0x7f, 0x50, 0xc9, 0x4a, 0xad, 0xbb, 0xf4, 0xa8, 0x92, 0x41, 0x2c, 0x05, 
	0xfe, 0xab, 0x53, 0xf5, 0x56, 0xaf, 0x7a, 0xff, 0xa6, 0xa4, 0xb6, 0xd6, 0xff, 0x7e, 0x05, 0x20, 
	0x14, 0x50, 0x4a, 0xef, 0x5d, 0xfa, 0xaa, 0xa9, 0x51, 0xad, 0xff, 0xc9, 0xa2, 0x15, 0x6a, 0xad, 
	0xd6, 0xa0, 0x94, 0x91, 0x14, 0x17, 0xbb, 0x2b, 0xde, 0xb6, 0x94, 0xaa, 0xb6, 0xee, 0xc7, 0x49, 
	0x55, 0x93, 0xfe, 0xfd, 0x14, 0x40, 0x08, 0xa8, 0x0a, 0xf7, 0xd6, 0xea, 0x95, 0x40, 0x04, 0xaf, 
	0xbf, 0xd5, 0x02, 0x92, 0xa5, 0x57, 0xb6, 0x42, 0x29, 0x22, 0x28, 0x2b, 0xbd, 0x6b, 0x52, 0xd4, 
	0xa9, 0x2a, 0xba, 0xfb, 0xd6, 0x54, 0xa9, 0x55, 0xfd, 0xfd, 0x11, 0x00, 0x10, 0x94, 0x16, 0xee, 
	0xad, 0x48, 0x22, 0x40, 0x02, 0xaf, 0xdf, 0x49, 0x42, 0xa5, 0x3a, 0xb6, 0xde, 0x8a, 0xaa, 0x4a, 
	0x28, 0x0b, 0xb5, 0xb6, 0xa2, 0x90, 0x12, 0x54, 0xb7, 0x7d, 0xa8, 0x88, 0x55, 0x56, 0xff, 0xf6, 
	0xa0, 0x40, 0x00, 0x88, 0x56, 0xfe, 0xda, 0x10, 0x02, 0x80, 0x0a, 0xdf, 0xdf, 0xa5, 0x21, 0x2a, 
	0xad, 0xad, 0x7e, 0x8a, 0x2a, 0x54, 0x54, 0x17, 0xab, 0x4a, 0x44, 0x90, 0x12, 0x52, 0xbf, 0xc1, 
	0x12, 0x04, 0x49, 0x57, 0xff, 0xd7, 0x41, 0x40, 0x01, 0x08, 0x2a, 0xfa, 0xa9, 0x10, 0x04, 0x80, 
	0x8a, 0xfd, 0xaa, 0xa4, 0x40, 0x25, 0x55, 0x76, 0xfd, 0x28, 0x2a, 0x54, 0x54, 0x17, 0xd7, 0x68, 
	0x45, 0x50, 0x2a, 0x6a, 0xbf, 0x00, 0x48, 0x12, 0x15, 0x57, 0xdf, 0xb7, 0x85, 0x41, 0x01, 0x08, 
	0x5b, 0x7a, 0xe5, 0x10, 0x04, 0x85, 0x2b, 0xfd, 0x56, 0x91, 0x00, 0xa2, 0xaa, 0xf6, 0xfd, 0x50, 
	0x94, 0x14, 0x54, 0x2d, 0xd7, 0x50, 0x85, 0x50, 0x54, 0xaa, 0xf6, 0x4a, 0x40, 0x24, 0x14, 0xaa, 
	0xbb, 0xef, 0x45, 0x42, 0x02, 0x08, 0x57, 0x7a, 0xc4, 0x40, 0x0a, 0xaa, 0xab, 0xfa, 0x2d, 0x20, 
	0x80, 0x82, 0x55, 0xdf, 0xba, 0x90, 0x28, 0x91, 0x48, 0x2d, 0xd7, 0x51, 0x14, 0xa0, 0x2a, 0xae, 
	0xd9, 0x54, 0x82, 0x12, 0x29, 0x15, 0x6d, 0xf5, 0x84, 0x84, 0x08, 0x14, 0x57, 0x7a, 0x88, 0x80, 
	0x05, 0x55, 0x55, 0xf5, 0x74, 0x40, 0x00, 0x02, 0xa5, 0x5b, 0x5e, 0xa2, 0x2a, 0x45, 0x24, 0x2d, 
	0xd7, 0x45, 0x25, 0x20, 0x95, 0x57, 0xb5, 0x52, 0x88, 0x94, 0x88, 0x55, 0x6f, 0xf7, 0x88, 0x80, 
	0x10, 0x10, 0x5f, 0x7d, 0x90, 0x00, 0x4a, 0x55, 0x5a, 0xd2, 0xe9, 0x22, 0x00, 0x21, 0x15, 0x55, 
	0x5d, 0xa2, 0x55, 0x04, 0x88, 0x55, 0xd7, 0x24, 0x92, 0x02, 0x95, 0x57, 0x55, 0x84, 0x08, 0x92, 
	0x04, 0x4a, 0xb6, 0xf6, 0x88, 0x00, 0x48, 0x48, 0x5f, 0x7d, 0x41, 0x00, 0xa8, 0x55, 0x5a, 0xd6, 
	0xa9, 0x55, 0x00, 0x91, 0x29, 0x5b, 0xbb, 0xc2, 0xaa, 0x05, 0x14, 0x55, 0xd6, 0x94, 0x48, 0x02, 
	0x92, 0xab, 0x2a, 0x10, 0x12, 0x48, 0x04, 0x05, 0x6d, 0x6e, 0xa8, 0x40, 0x90, 0x40, 0x5f, 0x7d, 
	0x21, 0x02, 0xa9, 0x4a, 0xec, 0xaa, 0xa4, 0xaa, 0x82, 0x41, 0x35, 0xab, 0xb7, 0xa2, 0x2a, 0x05, 
	0x14, 0xab, 0xd7, 0x08, 0x50, 0x04, 0xaa, 0xb6, 0x90, 0x80, 0x48, 0x50, 0x10, 0x0a, 0xaa, 0xdd, 
	0xc9, 0x00, 0x90, 0x48, 0x7e, 0xfd, 0x45, 0x04, 0xaa, 0x4a, 0xaa, 0xaa, 0x52, 0x25, 0x09, 0x4a, 
	0xab, 0x5b, 0x76, 0x50, 0xaa, 0x05, 0x04, 0x97, 0x56, 0xa4, 0x10, 0x12, 0xaa, 0xba, 0x84, 0x88, 
	0x90, 0xa4, 0x20, 0x2a, 0xad, 0xbb, 0x64, 0x00, 0x90, 0x50, 0x7d, 0xbb, 0x08, 0x85, 0x2a, 0x55, 
	0x5f, 0x54, 0x42, 0x4a, 0x52, 0x96, 0xad, 0xb5, 0x5e, 0xd1, 0x54, 0x45, 0x08, 0xaf, 0x6d, 0x42, 
	0x50, 0x12, 0xaa, 0xd5, 0xab, 0x29, 0x25, 0x29, 0x52, 0xaa, 0xdb, 0xf7, 0xa4, 0x02, 0x00, 0x44, 
	0x7a, 0xf5, 0x29, 0x04, 0xaa, 0xaa, 0xae, 0xaa, 0x84, 0x90, 0xa4, 0x4a, 0xb6, 0xad, 0x5a, 0xd1, 
	0x51, 0x55, 0x10, 0xad, 0xbe, 0x82, 0x40, 0x0a, 0xb5, 0x52, 0xb5, 0x52, 0x4a, 0x95, 0x2a, 0xaa, 
	0xb7, 0xff, 0x64, 0x0a, 0x00, 0x48, 0x4b, 0x6a, 0x90, 0x95, 0x55, 0x5a, 0xdb, 0xd5, 0x55, 0x22, 
	0x55, 0x54, 0xaa, 0xba, 0xab, 0xd1, 0x51, 0x45, 0x04, 0xee, 0xfe, 0x8a, 0x40, 0x12, 0xd7, 0x6d, 
	0x7d, 0x48, 0x95, 0x52, 0x92, 0xa9, 0x57, 0xfd, 0x64, 0x04, 0x10, 0x50, 0x55, 0xab, 0x40, 0x24, 
	0xaa, 0xb5, 0xab, 0xab, 0x55, 0x49, 0x28, 0x4a, 0x95, 0x5a, 0xd7, 0xa9, 0x51, 0x44, 0x08, 0xb7, 
	0xf6, 0x95, 0x01, 0x15, 0x5a, 0xdd, 0xdd, 0xaa, 0x24, 0xa5, 0x15, 0x4a, 0xaf, 0xfd, 0x52, 0x24, 
	0x81, 0x44, 0x75, 0x5b, 0x40, 0xa8, 0x55, 0xad, 0x6e, 0xf6, 0xd5, 0x52, 0x94, 0x8a, 0xa5, 0x75, 
	0x5f, 0x68, 0x92, 0x48, 0x10, 0xaf, 0xea, 0xaa, 0x02, 0xaa, 0xd6, 0xb5, 0xbb, 0x6a, 0x89, 0x42, 
	0x54, 0x54, 0xaf, 0xd5, 0x2a, 0x09, 0x05, 0x04, 0x75, 0x5a, 0xa0, 0xa0, 0x55, 0x6b, 0x56, 0xed, 
	0xaa, 0x6a, 0xa9, 0x25, 0x4a, 0xba, 0xdb, 0xd0, 0xa0, 0xa0, 0x50, 0xbf, 0xed, 0x54, 0x15, 0x2b, 
	0x5a, 0xdb, 0x56, 0xaa, 0x94, 0x94, 0x92, 0xa5, 0x57, 0xad, 0x54, 0x0a, 0x09, 0x04, 0x6a, 0xb5, 
	0x52, 0x80, 0xb5, 0xaa, 0xaa, 0xed, 0xaa, 0xaa, 0x42, 0x44, 0x52, 0xad, 0x76, 0xd2, 0xa0, 0x80, 
	0x48, 0xbb, 0xfe, 0xa8, 0x4a, 0xae, 0xad, 0x6b, 0x56, 0xaa, 0xaa, 0xa9, 0x21, 0x04, 0xb5, 0xab, 
	0x68, 0x0a, 0x2a, 0x10, 0x6d, 0x55, 0xf6, 0x91, 0x52, 0xab, 0xad, 0xba, 0xa9, 0x49, 0x14, 0x88, 
	0xaa, 0xaa, 0xdd, 0x52, 0x40, 0x80, 0x84, 0xbb, 0xff, 0x5a, 0x4a, 0xad, 0x5a, 0xb6, 0xd5, 0x55, 
	0x55, 0x42, 0x42, 0x21, 0x4f, 0x6b, 0x74, 0x2a, 0x24, 0x28, 0xed, 0x55, 0xd5, 0xaa, 0xaa, 0xad, 
	0x5a, 0xab, 0x55, 0x55, 0x29, 0x10, 0x94, 0xa9, 0x55, 0x51, 0x00, 0x81, 0x04, 0x77, 0xff, 0x7e, 
	0xd5, 0x55, 0x6b, 0xeb, 0xb5, 0x55, 0x54, 0x94, 0x84, 0x25, 0x56, 0xad, 0x68, 0xa8, 0x28, 0x48, 
	0xaa, 0xb7, 0xd7, 0x7b, 0xf6, 0xb5, 0x5c, 0xda, 0xb4, 0xaa, 0x85, 0x51, 0x52, 0x55, 0x76, 0xb2, 
	0x02, 0x82, 0x14, 0xff, 0xfd, 0xfb, 0xbd, 0x5d, 0xad, 0x55, 0x55, 0x55, 0x55, 0x32, 0x24, 0x29, 
	0x55, 0x55, 0xa8, 0x88, 0x20, 0x88, 0x55, 0x57, 0x6e, 0xef, 0xf6, 0xd5, 0xab, 0x55, 0xaa, 0xa4, 
	0x89, 0x92, 0xa5, 0x29, 0x55, 0x52, 0x22, 0x48, 0x24, 0xff, 0xff, 0xff, 0xf5, 0xb1, 0x76, 0xb5, 
	0x55, 0x55, 0x55, 0x54, 0xa4, 0x94, 0x94, 0x90, 0x00, 0x88, 0x02, 0x50, 0x55, 0xbd, 0xdb, 0x7f, 
	0xf5, 0x55, 0x54, 0xaa, 0x20, 0x20, 0x02, 0x08, 0x40, 0x40, 0x05, 0x2a, 0x22, 0x90, 0x8c, 0x4a, 
	0xa6, 0xad, 0x49, 0x08, 0x88, 0x00, 0x00, 0x8a, 0x8a, 0xa0, 0xa2, 0x12, 0x12, 0xa0, 0x80, 0x88, 
	0x01, 0x50, 0x20, 0x10, 0x10, 0x12, 0x42, 0x22, 0xaa, 0x92, 0x20, 0x20, 0x0a, 0x09, 0x24, 0x88, 
	0x0a, 0x24, 0x00, 0x84, 0x54, 0x95, 0x4a, 0xa4, 0x89, 0x28, 0x88, 0x00, 0x48, 0x8a, 0x8a, 0x40, 
	0x80, 0x89, 0x22, 0x40, 0x81, 0x24, 0x11, 0x54, 0x52, 0x41, 0x12, 0x54, 0x85, 0x25, 0x55, 0x22, 
	0x20, 0x40, 0x94, 0x54, 0x22, 0x48, 0x12, 0x28, 0x00, 0x05, 0x28, 0xa9, 0x2a, 0xa4, 0x82, 0x52, 
	0x92, 0x48, 0x88, 0x8a, 0x14, 0x22, 0x02, 0x88, 0x12, 0x80, 0x81, 0x24, 0xa2, 0xa4, 0xa4, 0x90, 
	0x52, 0x54, 0x94, 0x49, 0x12, 0x22, 0x21, 0x01, 0x08, 0x90, 0x22, 0x80, 0x12, 0x00, 0x00, 0x09, 
	0x54, 0x12, 0x4a, 0x88, 0x22, 0x21, 0x00, 0x40, 0x80, 0x04, 0x48, 0x20, 0x00, 0x00, 0x10, 0x40, 
	0x24, 0x49, 0x05, 0x50, 0x40, 0x00, 0x22, 0x88, 0x88, 0x24, 0x08, 0x11, 0x10, 0x00, 0x82, 0x09, 
	0x10, 0x02, 0x00, 0x81, 0x00, 0x2a, 0xac, 0x09, 0x22, 0x00, 0x00, 0x01, 0x00, 0x80, 0x04, 0x00, 
	0x84, 0x00, 0x40, 0x01, 0x08, 0x24, 0x24, 0x20, 0x05, 0x50, 0x20, 0x08, 0x88, 0x22, 0x20, 0x02, 
	0x04, 0x80, 0x44, 0x20, 0x51, 0x00, 0x90, 0x41, 0x09, 0x00, 0x82, 0x2b, 0xa8, 0x04, 0x80, 0x01, 
	0x00, 0x08, 0x90, 0x50, 0x24, 0x10, 0x82, 0x04, 0x24, 0x04, 0x04, 0x20, 0x22, 0x08, 0x0f, 0x54, 
	0xa0, 0x24, 0x90, 0x49, 0x44, 0x25, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 
	0x40, 0x8d, 0xa8
};


void setup() {
  Serial.begin(9600); 
  
  delay(1000);
  Serial.println();
  Serial.println("updating tide data... ");
  // TODO: finn ut hvordan du passer listen og oppdaterer den
  tideData = updateTide();
  Serial.println("Exited updateTide function");


  // *** special handling for Waveshare ESP32 Driver board *** //
  // ********************************************************* //
    #if defined(ESP32) && defined(USE_HSPI_FOR_EPD)
      hspi.begin(13, 12, 14, 15); // remap hspi for EPD (swap pins)
      display.epd2.selectSPI(hspi, SPISettings(4000000, MSBFIRST, SPI_MODE0));
    #endif
  // *** end of special handling for Waveshare ESP32 Driver board *** //
  // **************************************************************** //
  
  display.init(9600);

  bootScreen();
  drawCurve();
}

tide_t updateTide(){
  tide_t localTide;

  WiFi.begin(ssid, password);
  Serial.println("Connecting");
  while(WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  Serial.println(WiFi.localIP());



  // ###########################################################################################################################################
  // ##################################   tidssynk kall  #######################################################################################
  timeClient.begin();
  timeClient.setTimeOffset(gmtOffset*3600);
  while(!timeClient.update()) {
    timeClient.forceUpdate();
  }

  formattedDate = timeClient.getFormattedDate();
  //Serial.println(formattedDate);
  
  int splitT = formattedDate.indexOf("T");
  dayStamp = formattedDate.substring(0, splitT);
  Serial.print("DATE: ");
  Serial.println(dayStamp);
  
  timeStamp = formattedDate.substring(splitT+1, formattedDate.length()-1);
  //Serial.print("HOUR: ");
  //Serial.println(timeStamp);

  Serial.print("HOUR: ");
  Serial.print(timeClient.getHours() + gmtOffset);
  Serial.print(":");
  Serial.print(timeClient.getMinutes());
  Serial.print(":");
  Serial.println(timeClient.getSeconds());

  rtc.setTime(timeClient.getEpochTime());  // Sett den interne klokken til ESP32 etter det NTP serveren sier
  Serial.println();
  Serial.println("RTC time: ");
  Serial.print("DATE: ");
  Serial.println(rtc.getDate());
  Serial.print("HOUR: ");
  Serial.println(rtc.getTime());



  
  // ###########################################################################################################################################
  // ##################################   TIDEVANN API-KALL  ###################################################################################
  //Check WiFi connection status
  if(WiFi.status()== WL_CONNECTED){
    HTTPClient http;
    

    // #################################################################################
    // Generate url query with our set data
    String serverPath = serverName + "?lat=";
    serverPath += lat;
    serverPath += "&lon=";
    serverPath += lon;
    serverPath += urlDate(rtc.getYear(), rtc.getMonth(), rtc.getDay(), nDays);
    serverPath += "&datatype=pre&refcode=cd&place=lindoya&file=&lang=nb&interval=60&dst=0&tzone=1&tide_request=locationdata";
    //
    // #################################################################################


    // Your Domain name with URL path or IP address with path
    http.begin(serverPath.c_str());
    
    // If you need Node-RED/server authentication, insert user and password below
    //http.setAuthorization("REPLACE_WITH_SERVER_USERNAME", "REPLACE_WITH_SERVER_PASSWORD");
    
    // Send HTTP GET request
    int httpResponseCode = http.GET();
    
    
    if (httpResponseCode>0) {
      //Serial.println("HTTP Response code: ");
      //Serial.println(httpResponseCode);
      String payload = http.getString();  // Hent ut hele xml filen som en string
      //Serial.println(payload);
      
      int listIndex = 0;  // index for hvor i listen jeg legger inn dataene, siden append ikke er en greie i C

      for(int i = 6; i < payload.length() - 10; i++){  // se gjennom XML-fil-strengen (itterer hver char), minus kantene, siden jeg ser etter en 5 char substring 

        // format på XML linje:
        // <waterlevel value="61.5" time="2024-06-26T00:00:00+01:00" flag="pre"/>

        if(payload.substring(i-5,i) == "alue="){  // hvis vi er rett foran tallverdien   -  value="XX.X"

          localTide.Level[listIndex] = int(payload.substring(i+1, i+5).toFloat() * 10);  // skaler opp med ti, slik at vi har int's, og legg den inn i lista
          localTide.Time[listIndex] = tmConvert_t(payload.substring(i+13, i+17).toInt(), payload.substring(i+18, i+20).toInt(), payload.substring(i+21, i+23).toInt(), payload.substring(i+24, i+26).toInt(),00,00);               // Bruk funskjon til å gjøre om substringsene i XML til time_t formatet og legg i listen
          //                                        year                                      month                                 day                                          hour                      (data is per hour, so minute and second is 00)
         
          //Serial.print("waterlevel: "); Serial.println(localTide.Level[listIndex]);
          //Serial.print("epoch time: "); Serial.println(localTide.Time[listIndex]); 
          //Serial.print("Date substrings: year: "); Serial.print(payload.substring(i+13, i+17).toInt()); Serial.print(" month: "); Serial.print(payload.substring(i+18, i+20).toInt()); Serial.print(" day: "); Serial.print(payload.substring(i+21, i+23).toInt()); Serial.print(" hour: "); Serial.println(payload.substring(i+24, i+26).toInt());
          //Serial.println();

          listIndex++;

        }
      }

    }
    else {
      Serial.print("Error code: ");
      Serial.println(httpResponseCode);
    }
    // Free resources
    http.end();

    
  }
  else {
    Serial.println("WiFi Disconnected");
  }

return localTide;
}

String urlDate(int YYYY, byte MM, byte DD, byte addDays){
  byte days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  byte dd = DD + addDays;
  byte mm = MM;
  int yyyy = YYYY;

  while(dd > days[mm-1]){  // hvis dag-delen av datoen er større en antall dager den måneden (trekker fra en for å 0-indeksere måneden)
    dd = dd-days[mm-1];     // trekk fra antall dager den mæneden
    mm++;                  // inc måneden
  }

  if(mm > 12){     // aint no way noen legger til mer enn ett år med data
    mm = mm - 12;  // trekk fra månedene fra forrige år
    yyyy++;        // increment år
  }

  // Shape: &fromtime=2024-06-13T00%3A00&totime=2024-06-20T00%3A00
  String retString = "&fromtime=";
  retString = retString + YYYY; 
  retString = retString + "-";
  if(MM < 10){retString = retString + "0";}
  retString = retString + MM;
  retString = retString + "-";
  if(DD < 10){retString = retString + "0";}
  retString = retString + DD;
  retString = retString + "T00%3A00&totime=";

  retString = retString + yyyy;
  retString = retString + "-";
  if(mm < 10){retString = retString + "0";}
  retString = retString + mm;
  retString = retString + "-";
  if(dd < 10){retString = retString + "0";}
  retString = retString + dd;
  retString = retString + "T00%3A00";

  return retString;
}


time_t tmConvert_t(int YYYY, byte MM, byte DD, byte hh, byte mm, byte ss){
  tmElements_t te;  //Time elements structure
  time_t unixTime; // a time stamp te.Second = 0;

  te.Second = ss;
  te.Minute = mm;
  te.Hour = hh; //11 pm
  te.Day = DD;
  te.Month = MM;
  te.Year = YYYY - 1970; //Y2K, in seconds = 946684800UL

  unixTime =  makeTime(te);
  return unixTime; 
}

const char Ln1[] = "Iver Iscariot's";
const char Ln2[] = "Tide Watch";
void bootScreen(){
  display.setRotation(screenRot);
  display.setFont(&FreeMonoBold9pt7b);
  display.setTextColor(GxEPD_BLACK);

  // ------------------ splash screen ---------------
  display.setFullWindow();
  display.firstPage();
  do
  {
    display.fillScreen(GxEPD_WHITE);
    display.setCursor(20, 20);
    display.print(Ln1);
    display.setCursor(35, 35);
    display.print(Ln2);
    display.drawInvertedBitmap(25, 35, cat, 150, 145, GxEPD_BLACK);
    

  }
  while (display.nextPage());
  delay(5000);
  
  // ------------ draw normal screen ---------------------
  
  display.clearScreen(0); // black
  display.firstPage();
  
  do
  {
    display.fillScreen(GxEPD_WHITE);
    display.setCursor(12, 100);
    display.setTextSize(2);
    display.print(rtc.getTime()); 
    Serial.println(rtc.getTime()); 
    
  }
  while (display.nextPage());

  display.hibernate();
}

void clockUpdate(){
  bool nonSec = 0;  // hcis vi oppdaterer noe annet enn sekundet, må vi flashe skjermen litt ekstra
  display.setRotation(screenRot);
  display.setFont(&FreeMonoBold9pt7b);
  display.setTextSize(2);
  
  // -------- decide on the size of the partial update ----------
  if(rtc.getMinute() == 0 && rtc.getSecond() < 10){  // hvis vi har bikket timen
    display.setPartialWindow(0, 75, 200, 30);
    nonSec = 1;
  } 
  else if(rtc.getSecond() < 10){  // hvis vi har bikket minuttet
    display.setPartialWindow(65, 75, 200-65, 30);
    nonSec = 1;
  }
  else{
    display.setPartialWindow(135, 75, 200-135, 30);
  }

  // --------- print clock -------------
  display.firstPage();

  do{display.fillScreen(GxEPD_BLACK); display.setTextColor(GxEPD_WHITE); display.setCursor(12, 100); display.print(rtc.getTime()); }
  while (display.nextPage());
  if(nonSec == 1){
    do{display.fillScreen(GxEPD_WHITE); display.setTextColor(GxEPD_BLACK); display.setCursor(12, 100); display.print(rtc.getTime()); }
    while (display.nextPage());
    do{display.fillScreen(GxEPD_BLACK); display.setTextColor(GxEPD_WHITE); display.setCursor(12, 100); display.print(rtc.getTime()); }
    while (display.nextPage());
    do{display.fillScreen(GxEPD_WHITE); display.setTextColor(GxEPD_WHITE); display.setCursor(12, 100); display.print(rtc.getTime()); }
    while (display.nextPage());
    do{display.fillScreen(GxEPD_BLACK); display.setTextColor(GxEPD_WHITE); display.setCursor(12, 100); display.print(rtc.getTime()); }
    while (display.nextPage());
  }

  do
  {
    display.fillScreen(GxEPD_WHITE);
    display.setTextColor(GxEPD_BLACK);
    display.setCursor(12, 100);
    display.print(rtc.getTime());  
    Serial.println(rtc.getTime());
    
  }
  while (display.nextPage());
  
  display.hibernate();
}

void drawCurve(){
  display.setPartialWindow(0, 110, 200, 90);  // bit under klokken
  display.firstPage();

  int tideMax = 0;
  int tideMin = 10000;
  // find min and max values
  for ( int i = 0; i < 24; i++ ){
		if ( tideData.Level[i] > tideMax ){
			tideMax = tideData.Level[i];
		}
		if ( tideData.Level[i] < tideMin ){
			tideMin = tideData.Level[i];
		}
	}



  do
  {
    display.fillScreen(GxEPD_WHITE);
    display.setTextColor(GxEPD_BLACK);

    for(int i = 0; i < 24; i++ ){
      display.drawLine(i*8, map(tideData.Level[i],tideMax,tideMin,115,195), (i+1)*8, map(tideData.Level[i+1],tideMax,tideMin,115,195), GxEPD_BLACK);
      display.drawLine(i*8, map(tideData.Level[i],tideMax,tideMin,115,195)-1, (i+1)*8, map(tideData.Level[i+1],tideMax,tideMin,115,195)-1, GxEPD_BLACK);  // draw line one lower to thicken
      display.drawLine(i*8, map(tideData.Level[i],tideMax,tideMin,115,195)+1, (i+1)*8, map(tideData.Level[i+1],tideMax,tideMin,115,195)+1, GxEPD_BLACK);  // draw line one lower to thicken
      display.drawLine(i*8 + 1, map(tideData.Level[i],tideMax,tideMin,115,195)-1, (i+1)*8 +1 , map(tideData.Level[i+1],tideMax,tideMin,115,195)-1, GxEPD_BLACK);  // draw line one lower to thicken
    }
    
  }
  while (display.nextPage());
  
  display.hibernate();
}



void loop() {
  delay(5000);
  Serial.println(rtc.getTime());
  clockUpdate();
  if(rtc.getMinute() % 15 == 0){
    drawCurve();
  }
}